// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package featurestores

import (
	"sync"
)

// Ensure, that FeatureStoreMock does implement FeatureStore.
// If this is not the case, regenerate this file with moq.
var _ FeatureStore = &FeatureStoreMock{}

// FeatureStoreMock is a mock implementation of FeatureStore.
//
// 	func TestSomethingThatUsesFeatureStore(t *testing.T) {
//
// 		// make and configure a mocked FeatureStore
// 		mockedFeatureStore := &FeatureStoreMock{
// 			GetFunc: func(key string) (bool, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedFeatureStore in code that requires FeatureStore
// 		// and then make assertions.
//
// 	}
type FeatureStoreMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(key string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *FeatureStoreMock) Get(key string) (bool, error) {
	if mock.GetFunc == nil {
		panic("FeatureStoreMock.GetFunc: method is nil but FeatureStore.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedFeatureStore.GetCalls())
func (mock *FeatureStoreMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
